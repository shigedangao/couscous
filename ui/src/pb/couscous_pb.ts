// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file couscous.proto (package couscous, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message couscous.NewChannelRequest
 */
export class NewChannelRequest extends Message<NewChannelRequest> {
  constructor(data?: PartialMessage<NewChannelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "couscous.NewChannelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewChannelRequest {
    return new NewChannelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewChannelRequest {
    return new NewChannelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewChannelRequest {
    return new NewChannelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewChannelRequest | PlainMessage<NewChannelRequest> | undefined, b: NewChannelRequest | PlainMessage<NewChannelRequest> | undefined): boolean {
    return proto3.util.equals(NewChannelRequest, a, b);
  }
}

/**
 * @generated from message couscous.Chat
 */
export class Chat extends Message<Chat> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "couscous.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

/**
 * @generated from message couscous.MessageRequest
 */
export class MessageRequest extends Message<MessageRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string chat_id = 2;
   */
  chatId = "";

  constructor(data?: PartialMessage<MessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "couscous.MessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chat_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageRequest {
    return new MessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageRequest {
    return new MessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageRequest | PlainMessage<MessageRequest> | undefined, b: MessageRequest | PlainMessage<MessageRequest> | undefined): boolean {
    return proto3.util.equals(MessageRequest, a, b);
  }
}

/**
 * @generated from message couscous.MessageResponse
 */
export class MessageResponse extends Message<MessageResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<MessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "couscous.MessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageResponse {
    return new MessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageResponse {
    return new MessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MessageResponse | PlainMessage<MessageResponse> | undefined, b: MessageResponse | PlainMessage<MessageResponse> | undefined): boolean {
    return proto3.util.equals(MessageResponse, a, b);
  }
}

